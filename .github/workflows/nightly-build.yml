name: Nightly Build and QA Test

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  test-on-temp-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Infra Repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch Temp EC2
        id: launch_ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0c2b8ca1dad447f8a \
            --count 1 \
            --instance-type t2.micro \
            --key-name devOpsFinal \
            --security-group-ids sg-0dec66a9ba8d66a75 \
            --subnet-id subnet-07e2cadc5b35439a8 \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          
      - name: Wait for EC2 to be in "running" state
        run: |
          STATUS="pending"
          while [ "$STATUS" != "running" ]; do
            sleep 10
            STATUS=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].State.Name' --output text)
            echo "Current EC2 Status: $STATUS"
          done
          echo "EC2 is now running!"    

      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Wait for EC2 to be in "running" state
        run: |
          STATUS="pending"
          while [ "$STATUS" != "running" ]; do
            sleep 10
            STATUS=$(aws ec2 describe-instances \
              --instance-ids $INSTANCE_ID \
              --query 'Reservations[0].Instances[0].State.Name' --output text)
            echo "Current EC2 Status: $STATUS"
          done
          echo "EC2 is now running!"      

      - name: Wait for SSH Port to be Open
        run: |
          echo "Waiting for SSH Port 22 to be available..."
          until nc -zv ${{ env.PUBLIC_IP }} 22; do
            echo "SSH is not available yet. Retrying in 5 seconds..."
            sleep 5
          done
          echo "SSH is now available!"

      - name: Add EC2 Host Key to Known Hosts
        run: |
          ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts    

      - name: SSH into EC2 and Run Setup
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ env.PUBLIC_IP }} << 'EOF'
            sudo yum update -y
            sudo yum install -y git docker
            sudo systemctl enable docker
            sudo systemctl start docker
            sudo groupadd docker || true
            sudo usermod -aG docker ec2-user
            sudo chmod 666 /var/run/docker.sock

            mkdir -p ~/.docker/cli-plugins/
            sudo curl -SL "https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64" -o ~/.docker/cli-plugins/docker-compose
            sudo chmod +x ~/.docker/cli-plugins/docker-compose

            docker compose version

            echo "Cloning app repositories..."
            mkdir -p /home/ec2-user/app && cd /home/ec2-user/app
            git clone https://github.com/kwohyuno/devops-final-app-repo-frontend.git frontend
            git clone https://github.com/kwohyuno/devops-final-app-repo-backend-post-service.git backend-post
            git clone https://github.com/kwohyuno/devops-final-app-repo-backend-signup-service.git backend-signup

            echo "Creating docker-compose.yml..."
            cat <<EOC > docker-compose.yml
            version: '3'
            services:
              frontend:
                image: $AWS_ECR_URL/frontend:latest
                ports:
                  - "80:80"
                networks:
                  - myapp-net
              backend-post:
                image: $AWS_ECR_URL/backend-post:latest
                ports:
                  - "8080:8080"
                networks:
                  - myapp-net
              backend-signup:
                image: $AWS_ECR_URL/backend-signup:latest
                ports:
                  - "8081:8080"
                networks:
                  - myapp-net
            networks:
              myapp-net:
            EOC

            echo "Starting Docker Compose..."
            docker compose up -d

            echo "Waiting for services to be ready..."
            for i in {1..5}; do
              curl -f http://localhost:8080/api/board && break || echo "backend-post not ready"; sleep 10
            done
            for i in {1..5}; do
              curl -f http://localhost:8081/api2/members && break || echo "backend-signup not ready"; sleep 10
            done
            for i in {1..5}; do
              curl -f http://localhost || break || echo "frontend not ready"; sleep 10
            done

            echo "✅ All services responded successfully"
          EOF

      - name: Run Smoke Test on EC2 (External)
        run: |
          echo "Running Smoke Test..."
          curl -f http://${{ env.PUBLIC_IP }}:8080/api/board || { echo "❌ backend-post Failed!"; exit 1; }
          curl -f http://${{ env.PUBLIC_IP }}:8081/api2/members || { echo "❌ backend-signup Failed!"; exit 1; }
          curl -f http://${{ env.PUBLIC_IP }} || { echo "❌ frontend Failed!"; exit 1; }
          echo "✅ Smoke Test Passed!"

      - name: Terminate EC2
        if: always()
        run: |
          aws ec2 terminate-instances --instance-ids $INSTANCE_ID || true
